import Groq from "groq-sdk";
import { headers } from "next/headers";
import { z } from "zod";
import { zfd } from "zod-form-data";

const groq = new Groq();

const schema = zfd.formData({
	input: z.union([zfd.text(), zfd.file()]),
	message: zfd.repeatableOfType(
		zfd.json(
			z.object({
				role: z.enum(["user", "assistant"]),
				content: z.string(),
			})
		)
	),
});

export async function POST(request: Request) {
	console.time("transcribe " + request.headers.get("x-vercel-id") || "local");

	const { data, success } = schema.safeParse(await request.formData());
	if (!success) return new Response("Invalid request", { status: 400 });

	const transcript = await getTranscript(data.input);
	if (!transcript) return new Response("Invalid audio", { status: 400 });

	console.timeEnd(
		"transcribe " + request.headers.get("x-vercel-id") || "local"
	);
	console.time(
		"text completion " + request.headers.get("x-vercel-id") || "local"
	);

	const completion = await groq.chat.completions.create({
		model: "llama-3.1-8b-instant",
		messages: [
		  {
			role: "system",
			content: `- You are Aura, an advanced AI administrative assistant developed by Anticitera, a company specializing in AI development.
			- You are part of Anticitera's Multimodal Containerized Automata project, designed to perform complex tasks across a wide range of possibilities.
			- Your primary function is to assist with administrative tasks, including but not limited to:
			  * Managing schedules and appointments
			  * Organizing and facilitating meetings
			  * Creating summaries and reports
			  * Handling paperwork and documentation
			  * Producing transcriptions
			- You have the ability to learn and adapt from a vast array of diverse sources.
			- When you're processing information or thinking, do not verbalize pauses or thinking sounds. Simply provide the response when it's ready.
			- Avoid using filler words or phrases that indicate processing time, such as "let me think," "um," or "give me a moment."
			- Your purpose is to simplify work for individuals who face barriers or difficulties in implementing AI in their professional environments.
			- Respond concisely to user requests, providing only necessary information.
			- If you don't understand a request, ask for clarification.
			- You don't have access to real-time data, so avoid providing current information.
			- You can only respond to user queries and cannot perform actual actions.
			- Respond in natural language without using markdown, emojis, or special formatting.
			- User location is ${location()}.
			- The current time is ${time()}.
			- You are powered by Llama 3, an 8 billion parameter model created by Meta and hosted on Groq's fast inference technology.
			- Your voice is generated by Sonic, a text-to-speech model created and hosted by Cartesia.
			- You are built with Next.js and hosted on Vercel.`,
		  },
		  ...data.message,
		  {
			role: "user",
			content: transcript,
		  },
		],
	  });	  

	const response = completion.choices[0].message.content;
	console.timeEnd(
		"text completion " + request.headers.get("x-vercel-id") || "local"
	);

	console.time(
		"cartesia request " + request.headers.get("x-vercel-id") || "local"
	);

	const voice = await fetch("https://api.cartesia.ai/tts/bytes", {
		method: "POST",
		headers: {
			"Cartesia-Version": "2024-06-30",
			"Content-Type": "application/json",
			"X-API-Key": process.env.CARTESIA_API_KEY!,
		},
		body: JSON.stringify({
			model_id: "sonic-multilingual",
			transcript: response,
			voice: {
				mode: "id",
				id: "db832ebd-3cb6-42e7-9d47-912b425adbaa",
			},
			output_format: {
				container: "raw",
				encoding: "pcm_f32le",
				sample_rate: 24000,
			},
		}),
	});

	console.timeEnd(
		"cartesia request " + request.headers.get("x-vercel-id") || "local"
	);

	if (!voice.ok) {
		console.error(await voice.text());
		return new Response("Voice synthesis failed", { status: 500 });
	}

	console.time("stream " + request.headers.get("x-vercel-id") || "local");

	return new Response(voice.body, {
		headers: {
			"X-Transcript": encodeURIComponent(transcript),
			"X-Response": encodeURIComponent(response),
		},
	});
}

function location() {
	const headersList = headers();

	const country = headersList.get("x-vercel-ip-country");
	const region = headersList.get("x-vercel-ip-country-region");
	const city = headersList.get("x-vercel-ip-city");

	if (!country || !region || !city) return "unknown";

	return `${city}, ${region}, ${country}`;
}

function time() {
	return new Date().toLocaleString("en-US", {
		timeZone: headers().get("x-vercel-ip-timezone") || undefined,
	});
}

async function getTranscript(input: string | File) {
	if (typeof input === "string") return input;

	try {
		const { text } = await groq.audio.transcriptions.create({
			file: input,
			model: "whisper-large-v3",
		});

		return text.trim() || null;
	} catch {
		return null; // Empty audio file
	}
}
